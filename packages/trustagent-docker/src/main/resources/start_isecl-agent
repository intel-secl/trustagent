#!/bin/bash

#####
#Copyright Â© 2019 Intel Corporation
#SPDX-License-Identifier: BSD-3-Clause
#####

# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
#set -e
set -o pipefail

# Error codes
export ERROR_TAGENT_INSTALL_FAIL=255
export ERROR_TAGENT_STARTUP_FAIL=254
export ERROR_TCSD_CONNECT_FAIL=253
export ERROR_TCSD_CONNECT_SUCCESS=0

# Trustagent install configuration
TRUSTAGENT_HOME=${TRUSTAGENT_HOME:-/opt/trustagent}
TRUSTAGENT_CONFIGURATION=$TRUSTAGENT_HOME/configuration
TRUSTAGENT_SETUP_LOG=/var/log/tagent_setup.log

# Constants
export NETWORK_CALL_SLEEP=${NETWORK_CALL_SLEEP:-30}
export NETWORK_CALL_RETRIES=${NETWORK_CALL_RETRIES:-20}
export PROVISION_COMPLETE_FLAG="$TRUSTAGENT_CONFIGURATION/.provisioning_hasrun"
export TPM_STACK_SETUP_FLAG="/root/.tpm_stack_setup_done"

# load linux utility
if [ -f "$TRUSTAGENT_HOME/share/scripts/functions.sh" ]; then
  . $TRUSTAGENT_HOME/share/scripts/functions.sh
fi

function cmd_exec_and_retry() {
    for (( c=0; c<=NETWORK_CALL_RETRIES; c++ )); do
        result=$($@ 2>/dev/null)
        if [[ $? == 0 ]]; then
            echo "$result"
            return 0
        fi
        sleep "$NETWORK_CALL_SLEEP"
    done
    return 1
}

function get_master_cert () {
    CERT=$(cmd_exec_and_retry "openssl s_client -connect ${MTWILSON_IP_ADDRESS}:8443") || return 1
    echo -e "$CERT" | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/trustagent.pem || return 1
    return 0
}

function print_latest_ta_logs() {
   if [ -f $TRUSTAGENT_HOME/logs/trustagent.log ]; then
      tail -n 500 $TRUSTAGENT_HOME/logs/trustagent.log
   fi 
}

function detect_host_tpm_version() {
  export TPM_VERSION
  if [[ -f "$TRUSTAGENT_HOST_MOUNT/sys/class/misc/tpm0/device/caps" || -f "$TRUSTAGENT_HOST_MOUNT/sys/class/tpm/tpm0/device/caps" ]]; then
    TPM_VERSION=1.2
  else
  #  if [[ -f "/sys/class/tpm/tpm0/device/description" && `cat /sys/class/tpm/tpm0/device/description` == "TPM 2.0 Device" ]]; then
    TPM_VERSION=2.0
  fi
}

function start_tcsd {
    if [ "$TPM_VERSION" == "1.2" ]; then
        # this could be moved into the setup.sh step, but it's ok here for now
        ln -s $TRUSTAGENT_HOME/share/tpmtools/sbin/* $TRUSTAGENT_HOME/bin/ &> /dev/null
        echo "Starting TCSD $TPM_VERSION"
        tcsd
	sleep 5
    fi
}

function start_isecl-agent() {

    while read -r line; do export $line; done < /run/secrets/trustagent.env &> /dev/null

    # Delete the copied secrets
    rm -f /run/secrets/trustagent.env &> /dev/null

    detect_host_tpm_version

    if [ ! -f "$TPM_STACK_SETUP_FLAG" ]; then
        echo "New Container. Configuring pre-requisites: "

        #./install_prereq.sh &>> $TRUSTAGENT_SETUP_LOG
        #./setup_prereqs.sh &>> $TRUSTAGENT_SETUP_LOG

        # TPM can be accessed in this stage, meaning
        echo -n "$TPM_VERSION" > $TRUSTAGENT_CONFIGURATION/tpm-version

        cd -  &>/dev/null
        start_tcsd

        touch $TPM_STACK_SETUP_FLAG
        echo "Done"
    else
        cd -  &>/dev/null
        start_tcsd
    fi

    # update the system info. Update the permissions of the generated system-info folder
    # and other contents
    echo "Updating system-info ..."
    tagent update-system-info
    #
    #    # we need to execute module_analysis.sh outside of the container, which executes a tboot binary called txt-stat
    # we don't package txt-stat inside the container because different tboot versions may write a different format to memory
    echo "Updating measureLog.xml ..."
    export OUTFILE=/tmp/measureLog.xml
    /bin/cp ${TRUSTAGENT_HOME}/bin/module_analysis*.sh ${TRUSTAGENT_DOCKER_HOST_MOUNT}/tmp/
    rm -rf $TRUSTAGENT_HOME/var/measureLog.xml && chroot $TRUSTAGENT_DOCKER_HOST_MOUNT /tmp/module_analysis.sh
    rm -f ${TRUSTAGENT_DOCKER_HOST_MOUNT}/tmp/module_analysis*.sh
    /bin/cp ${TRUSTAGENT_DOCKER_HOST_MOUNT}/$OUTFILE ${TRUSTAGENT_HOME}/var/measureLog.xml
#    chown -R tagent:tagent $TRUSTAGENT_HOME/var/


    if [ ! -f "$PROVISION_COMPLETE_FLAG" ]; then
        echo "Provisioning to Host Verification Service ..."
        # Backup the logs from the build process and start tagent logs afresh
        mv $TRUSTAGENT_HOME/logs/trustagent.log ~/trustagent-install.log
        touch $TRUSTAGENT_HOME/logs/trustagent.log
#        chown -R tagent:tagent $TRUSTAGENT_HOME/logs/trustagent.log

        # echo "Restarting the container from saved volumes"
        # Check if all the required parameters are passed
        if [ -z "$MTWILSON_IP_ADDRESS" ] || [ -z "$CURRENT_IP" ] || [ -z "$TRUSTAGENT_ADMIN_PASSWORD" ]; then
            echo -e "\033[0;31m Insufficient argument provided , reguired :- MTWILSON_IP_ADDRESS, CURRENT_IP TRUSTAGENT_ADMIN_PASSWORD"
            exit 1
        fi

        # Running this out of the setup loop to ensure that AHUB always comes up after Verification service is up
        get_master_cert || return 1
        fingerprint=$(openssl x509 -noout -in /tmp/trustagent.pem -fingerprint -sha384 | awk -F= '$1="Var"{print $2}' | sed -r 's/[:]+//g' | tr '[:upper:]' '[:lower:]')

        if [ "$fingerprint" != "$MTWILSON_TLS_CERT_SHA384" ]; then
            echo -e "\033[0;31m Provided MTWILSON_TLS_CERT_SHA384 does not match the hosts TLS Cert of the Host"
            exit
        fi

        if [ -z $MTWILSON_HOSTNAME ]; then
          echo -e "\033[0;31m Missing configuration: MTWILSON_HOSTNAME"
          echo -e "\033[0;31m  - Use 'verification-service' as MTWILSON_HOSTNAME if Host verification service is running on a container. Or"
          echo -e "\033[0;31m  - Use the hostname of the server/vm on which the verification service is running"
          exit
        fi

        export MTWILSON_HOSTNAME=${MTWILSON_HOSTNAME:-verification-service}

        if [ -n $MTWILSON_IP_ADDRESS ]; then
          export MTWILSON_API_URL=https://$MTWILSON_HOSTNAME:8443/mtwilson/v2
        fi

        # Run the provisioning commands
        tagent setup

        if [[ "$PROVISION_ATTESTATION" == "y" || "$PROVISION_ATTESTATION" == "Y" || "$PROVISION_ATTESTATION" == "yes" ]]; then
            tagent provision-attestation
        fi
        if [[ ( "$PROVISION_ATTESTATION" == "y" || "$PROVISION_ATTESTATION" == "Y" || "$PROVISION_ATTESTATION" == "yes" ) && ( "$AUTOMATIC_REGISTRATION" == "y" || "$AUTOMATIC_REGISTRATION" == "Y" || "$AUTOMATIC_REGISTRATION" == "yes" ) ]]; then
            tagent create-host
        fi
        echo "Finished provisioning"
    fi

#    chown -R tagent:tagent $TRUSTAGENT_HOME

    echo "Restarting Trustagent ..."
    tagent restart
#
#    if [[ "$HOST_OS_VERSION" != "" ]]; then
#       echo "OS_VERSION environment variable is set. Reseting the platform-info to update the OS version (os-version)"
#       sed -ie "s/\"os-version\" \: \".*\"/\"os-version\" \: \"$HOST_OS_VERSION\"/" $TRUSTAGENT_HOME/var/system-info/platform-info
#    fi
#
#    if [[ "$HOST_OS_DISTRO" != "" ]]; then
#       echo "OS_DISTRO environment variable is set. Reseting the platform-info to update the OS DISTRO (os-name)"
#       sed -ie "s/\"os-name\" \: \".*\"/\"os-name\" \: \"$HOST_OS_DISTRO\"/" $TRUSTAGENT_HOME/var/system-info/platform-info
#    fi

    sleep 3

    # Check if agent process is up
    if [ "`tagent status`" != "Trust agent is running" ]; then
        echo "Error during Trust Agent startup. Refer logs for more information. Stopping container."
        print_latest_ta_logs
        #exit $ERROR_TAGENT_STARTUP_FAIL
    fi

    touch $PROVISION_COMPLETE_FLAG
}

start_isecl-agent

# Kick off background job to check if agent is up and running
tail -f $TRUSTAGENT_HOME/logs/trustagent.log & wait ${!}
